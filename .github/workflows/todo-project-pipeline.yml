# This workflow will build a Java project with Gradle and publish docker images to docker hub
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle
# For docker, see: https://www.learncloudnative.com/blog/2020-02-20-github-action-build-push-docker-images/

name: Todo Backend - Build Code, Publish Docker Image

on:
  workflow_dispatch:
  push:
    paths:
    - "todo-project/**"

jobs:
  build:
    name: Build Source and Run Unit Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./todo-project
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11.0.12
    # - name: Set up JDK 11
    #   uses: actions/setup-java@v2
    #   with:
    #     distribution: 'zulu'
    #     java-version: '11'
    #     check-latest: true
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Copy git folder - required since build generates the git.properties file
      run: |
        cp -r ../.git .
    - name: Build with Gradle
      run: ./gradlew build -Pghp.username=${{ github.repository_owner }} -Pghp.token=${{ secrets.GHP_TOKEN }}

  # Needs DOCKER_USER and DOCKER_PASSWORD secrets to be set in GitHub
  buildx:
    name: Publish - Docker Hub
    runs-on: ubuntu-latest
    needs: [build]
    env:
      DOCKER_REGISTRY_URL: "docker.io"
    defaults:
      run:
        working-directory: ./todo-project

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      # https://github.com/docker/setup-qemu-action
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      # https://github.com/docker/setup-buildx-action
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          buildkitd-flags: --debug
      -
        name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      -
        name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login $DOCKER_REGISTRY_URL -u ${{ secrets.DOCKER_USER }} --password-stdin
      -
        name: Build and push the images
        run: |
          cp -r ../.git .

          for service_name in $(ls -d *-service);do
            DOCKERFILE_PATH=$service_name/docker/Dockerfile
            DOCKER_IMAGE=$DOCKER_REGISTRY_URL/${{ secrets.DOCKER_USER }}/$service_name

            VERSION="${{ github.run_number }}"
            BRANCH="${{ github.ref }}"
            COMMIT_ID="${{ github.sha }}"
            COMMIT_MSG="${{ github.event.head_commit.message }}"
            BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            REPO_OWNER="${{ github.repository_owner }}"

            # docker build will run builx since we set install=true in setup buildx step
            echo docker buildx build --push --platform linux/arm64/v8,linux/amd64 --tag $DOCKER_IMAGE:$VERSION --tag $DOCKER_IMAGE:latest --file $DOCKERFILE_PATH --build-arg GITHUB_USERNAME=$REPO_OWNER --build-arg GITHUB_TOKEN=${{ secrets.GHP_TOKEN }} --build-arg BRANCH=$BRANCH --build-arg COMMIT_ID=$COMMIT_ID --build-arg COMMIT_MSG="$COMMIT_MSG" --build-arg CREATED=$BUILD_DATE --build-arg VERSION=$VERSION .
            docker buildx build --push --platform linux/arm64/v8,linux/amd64 --tag $DOCKER_IMAGE:$VERSION --tag $DOCKER_IMAGE:latest --file $DOCKERFILE_PATH --build-arg GITHUB_USERNAME=$REPO_OWNER --build-arg GITHUB_TOKEN=${{ secrets.GHP_TOKEN }} --build-arg BRANCH=$BRANCH --build-arg COMMIT_ID=$COMMIT_ID --build-arg COMMIT_MSG="$COMMIT_MSG" --build-arg CREATED=$BUILD_DATE --build-arg VERSION=$VERSION .
          done;
